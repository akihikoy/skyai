// common agent file for DCOB

/// initialization process:
connect  cmn.signal_initialization               , behavior.slot_initialize
connect  cmn.signal_initialization               , dcob.slot_initialize

/// start of episode process:
connect  cmn.signal_start_of_episode             , behavior.slot_start_episode

/// start of time step process:
connect  cmn.signal_start_of_timestep            , dcob.slot_start_time_step

/// end of time step process:
connect  cmn.signal_end_of_timestep              , dcob.slot_finish_time_step

/// learning signals:
connect  behavior.signal_execute_action          , dcob.slot_execute_action
connect  dcob.signal_execute_command             , cmn.slot_execute_command_trg
connect  dcob.signal_end_of_action               , behavior.slot_finish_action

connect  cmn.signal_reward                       , behavior.slot_add_to_reward
connect  cmn.signal_end_of_episode               , behavior.slot_finish_episode

connect  behavior.signal_end_of_episode          , cmn.slot_finalize_episode

/// I/O:
connect  dcob.out_action_set_size                , behavior.in_action_set_size

connect  cmn.out_ngnet                           , behavior.in_feature

connect  cmn.out_cont_time                       , behavior.in_cont_time

connect  cmn.out_ngnet                           , dcob.in_feature
connect  cmn.out_state                           , dcob.in_state
connect  cmn.out_ngnet_distance_to_nearest_bf    , dcob.in_distance_to_nearest_bf
connect  cmn.out_ngnet_center_state_set          , dcob.in_center_state_set

/// parameter setting:

dcob.config ={
    IntervalSet = (0.3)

    ProportionalDim = 2
    Cp ={
        resize(2, 2)
        [@]= 0
        [0]= {[0]=1;}
        [1]= {[1]=1;}
      }
    Cd ={
        resize(2, 2)
        [@]= 0
      }
  }

