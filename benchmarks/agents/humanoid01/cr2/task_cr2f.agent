// Crawling task's agent file
// using faster time-step
def episode_start_cr2(task_id)
{
  task_id.memory ={TmpR1= 0.0;  TmpR2= 0.0;}  // sum-of-reward, total-time
}
def action_start_cr2(task_id)
{
  task_id.memory ={TmpB1= false;}  // no falling down
  // print task_id.memory.TmpB1
}
def timestep_end_cr2(task_id)
{
  task_id.memory ={
      Reward= 25.0*0.01*(cast<real>(BaseVel[0])*cast<real>(BaseRot[(0,2)]) + cast<real>(BaseVel[1])*cast<real>(BaseRot[(1,2)]))
      Reward= cast<real>(Reward) - 25.0*0.001*fabs(cast<real>(BaseVel[5]))
    }
  if(!cast<bool>(task_id.memory.TmpB1) && (cast<bool>(task_id.memory.ContactWithGround[0]) || cast<bool>(task_id.memory.ContactWithGround[1])))
  {
    task_id.memory ={
        TmpB1= true  // fall down
        Reward= cast<real>(Reward) - 4.0  // falling-down penalty
      }
  }
  task_id.memory ={
      TmpR1= cast<real>(TmpR1) + cast<real>(Reward)  // update sum-of-reward
      TmpR2= cast<real>(TmpR2) + cast<real>(TimeStep)  // update total-time
    }
  if(cast<real>(task_id.memory.TmpR1) < -40.0 || cast<real>(task_id.memory.TmpR2) > 20.0)
  {
    task_id.memory ={EndOfEps= true;}  // end of episode
  }
}


def make_task_cr2(task_id,env_id)
{
  module  MHumanoidUnivTask task_id

  task_id.config ={
      SensingAtEpisodeStart  = false
      SensingAtActionStart   = false
      // SensingAtTimeStepStart = false
      SensingAtTimeStepEnd   = true

      FEpisodeStart   = "episode_start_cr2"
      FActionStart    = "action_start_cr2"
      // FTimeStepStart  = "timestep_start_cr2"
      FTimeStepEnd    = "timestep_end_cr2"
      ForwardStepCost = true
    }

  // slot_finish_episode  and  slot_end_of_action are not connected
  connect env_id.signal_start_of_system_timestep , task_id.slot_start_time_step
  // connect env_id.signal_end_of_system_timestep   , task_id.slot_finish_time_step
  connect env_id.signal_end_of_ctrl_timestep     , task_id.slot_finish_time_step
  connect env_id.signal_reward                   , task_id.slot_step_cost

  // connect env_id.out_base_pose                   , task_id.in_base_pose
  connect env_id.out_base_vel                    , task_id.in_base_vel
  connect env_id.out_base_rot                    , task_id.in_base_rot
  connect env_id.out_contact_with_ground         , task_id.in_contact_with_ground
  // connect env_id.out_contact_with_object         , task_id.in_contact_with_object
}
