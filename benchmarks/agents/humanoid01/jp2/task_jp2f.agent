// Jumping task's agent file
// using faster time-step
def episode_start(task_id)
{
  task_id.memory ={TmpR2= 0.0;}  // total-time
}
def action_start(task_id)
{
  task_id.memory ={TmpB1= false; TmpB2= false;}  // no falling down (head, hand)
}
def timestep_end(task_id)
{
  // reward from height (z-position)
  // given only when no link contacts with the ground
  if(!or(cast<list<bool> >(task_id.memory.ContactWithGround)))
  {
    task_id.memory ={
        Reward= cast<real>(Reward) + 25.0*0.01*cast<real>(BasePose[2])
      }
  }
  // penalty for falling down (base link and head link)
  if(!cast<bool>(task_id.memory.TmpB1) && or(shuffle(cast<list<bool> >(task_id.memory.ContactWithGround),(0,1))))
  {
    task_id.memory ={
        TmpB1= true  // fall down (head)
        Reward= cast<real>(Reward) - 2.0  // falling-down penalty
        EndOfEps= true
      }
  }
  // penalty for falling down (other than the base, the head link, and the foot links)
  if(!cast<bool>(task_id.memory.TmpB2) && or(shuffle(cast<list<bool> >(task_id.memory.ContactWithGround),(2,3,4,5,6,7, 8,9,10,11, 13,14,15,16))))
  {
    task_id.memory ={
        TmpB2= true  // fall down (hand,etc.)
        Reward= cast<real>(Reward) - 1.0  // falling-down penalty
        EndOfEps= true
      }
  }
  task_id.memory ={
      TmpR2= cast<real>(TmpR2) + cast<real>(TimeStep)  // update total-time
    }
  if(cast<real>(task_id.memory.TmpR2) > 5.0)
  {
    task_id.memory ={EndOfEps= true;}  // end of episode
  }
}

def make_task_jp2(task_id,env_id)
{
  module  MHumanoidUnivTask task_id

  task_id.config ={
      SensingAtEpisodeStart  = false
      SensingAtActionStart   = false
      // SensingAtTimeStepStart = false
      SensingAtTimeStepEnd   = true

      FEpisodeStart   = "episode_start"
      FActionStart    = "action_start"
      // FTimeStepStart  = "timestep_start"
      FTimeStepEnd    = "timestep_end"
      ForwardStepCost = true
    }

  // slot_finish_episode  and  slot_end_of_action are not connected
  connect env_id.signal_start_of_system_timestep , task_id.slot_start_time_step
  // connect env_id.signal_end_of_system_timestep   , task_id.slot_finish_time_step
  connect env_id.signal_end_of_ctrl_timestep     , task_id.slot_finish_time_step
  connect env_id.signal_reward                   , task_id.slot_step_cost

  connect env_id.out_base_pose                   , task_id.in_base_pose
  connect env_id.out_base_vel                    , task_id.in_base_vel
  connect env_id.out_base_rot                    , task_id.in_base_rot
  connect env_id.out_contact_with_ground         , task_id.in_contact_with_ground
  // connect env_id.out_contact_with_object         , task_id.in_contact_with_object
}
