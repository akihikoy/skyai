// Crawling task's agent file
include_once "cmn_task"

// objective is to go forward along the x-axis as fast as possible
composite MMoveForwardTask
{
  taskb_make_interface()

  taskb_add_step_cost()

  // reward from forward (x-axis) movement
  taskb_add_base_vel_reward(reward_vx,0,ForwardRewardGain,0.01)

  // penalty for y-movement
  taskb_add_base_vel_sqsum_reward(penalty_vy,(1),SidewardPenaltyGain,-0.1)

  // penalty for falling down (base link and head link)
  taskb_add_falling_down_penalty(penalty_fall,(0,1),FallingDownPenalty,-4.0)

  // end of episode: sum of reward is less than a const value
  taskb_endofeps_sum_reward_min(end_of_eps1,SumOfRmin,-40.0)

  // end of episode: time is greater than a const value
  taskb_endofeps_time_max(end_of_eps2,MaxTime,20.0)
}

// objective is to go forward as fast as possible
composite MMoveForwardTask2
{
  taskb_make_interface()

  taskb_add_step_cost()

  // reward from forward (current direction) movement
  taskb_add_directed_base_vel_reward(reward_v,(0,1),(0,2,1,2),ForwardRewardGain,0.01)

  // penalty for rotation around z-axis
  taskb_add_base_vel_norm_reward(penalty_wz,(5),RotationPenaltyGain,-0.001)

  // penalty for falling down (base link and head link)
  taskb_add_falling_down_penalty(penalty_fall,(0,1),FallingDownPenalty,-4.0)

  // end of episode: sum of reward is less than a const value
  taskb_endofeps_sum_reward_min(end_of_eps1,SumOfRmin,-40.0)

  // end of episode: time is greater than a const value
  taskb_endofeps_time_max(end_of_eps2,MaxTime,20.0)

// for debug:
// module   MPrinter reward_v_printer
// connect  reward_v.signal_reward , reward_v_printer.slot_real
// module   MPrinter penalty_wz_printer
// connect  penalty_wz.signal_reward , penalty_wz_printer.slot_real
}

def make_task_crawling_base(task_mod,task_id,env_id)
{
  module  task_mod task_id

  connect env_id.signal_end_of_system_timestep   , task_id.slot_finish_time_step
  connect env_id.signal_reward                   , task_id.slot_step_cost

  connect env_id.out_base_vel                    , task_id.in_base_vel
  connect env_id.out_base_rot                    , task_id.in_base_rot
  connect env_id.out_contact_with_ground         , task_id.in_contact_with_ground
}

def make_task_crawling(task_id,env_id)
{
  make_task_crawling_base(MMoveForwardTask,task_id,env_id)
}

def make_task_crawling2(task_id,env_id)
{
  make_task_crawling_base(MMoveForwardTask2,task_id,env_id)
}
