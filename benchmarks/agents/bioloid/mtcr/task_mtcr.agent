// Crawling task's agent file
def episode_start(task_id)
{
  task_id.memory ={TmpR2= 0.0;}  // total-time
}
def action_start(task_id)
{
}
def timestep_end(task_id)
{
  task_id.memory ={
      Reward= -5.0*0.01*(cast<real>(BaseVel[0])*cast<real>(BaseRot[(0,1)]) + cast<real>(BaseVel[1])*cast<real>(BaseRot[(1,1)]))
      Reward= cast<real>(Reward) - 25.0*0.001*fabs(cast<real>(BaseVel[5]))
    }
  task_id.memory ={
      TmpR2= cast<real>(TmpR2) + cast<real>(TimeStep)  // update total-time
    }
  if(cast<real>(task_id.memory.TmpR2) > 50.0)
  {
    task_id.memory ={EndOfEps= true;}  // end of episode
  }
}


def make_task_mtcr(task_id,env_id,mt_id)
{
  module  MBioloidUnivTask task_id

  task_id.config ={
      SensingAtEpisodeStart  = false
      SensingAtActionStart   = false
      // SensingAtTimeStepStart = false
      SensingAtTimeStepEnd   = true

      FEpisodeStart   = "episode_start"
      FActionStart    = "action_start"
      // FTimeStepStart  = "timestep_start"
      FTimeStepEnd    = "timestep_end"
      ForwardSystemReward = true
    }

  // slot_finish_episode  and  slot_end_of_action are not connected
  connect env_id.signal_start_of_timestep        , task_id.slot_start_time_step
  connect env_id.signal_end_of_timestep          , task_id.slot_finish_time_step
  connect env_id.signal_system_reward            , task_id.slot_system_reward

  // connect mt_id.out_pos                   , task_id.in_base_pos
  connect mt_id.out_vel                    , task_id.in_base_vel
  connect mt_id.out_rot                    , task_id.in_base_rot
  connect mt_id.out_unobserved_count       , task_id.in_unobserved_count
}
