// common agent file

composite MSingleRobotEnvironment
{
  module  MBasicLearningManager                       lmanager
  module  MDynamicsSimulator                          environment
  module  MRobotProbe                                 robot
  module  MBasisFunctionsDCOBNGnet                    ngnet
  module  MUserEmittedTimer                           timer

  module  MTimedResourceXX_TRealVector                tr_state
  module  MTimedResourceXY_TRealVector_TRealVector    tr_ngnet

  module  MVectorMixer_TRealVector                    state_converter
  module  MConstMultiplier_TRealMatrix_TRealVector    action_converter

  module  MFunctionSISOSharer_TRealVector_TRealVector exec_command_interface

  /// initialization process:
  connect  lmanager.signal_initialization                 , environment.slot_initialize
  connect  environment.slot_initialize_finished           , robot.slot_initialize
  connect  lmanager.signal_initialization                 , state_converter.slot_initialize
  connect  state_converter.slot_initialize_finished       , ngnet.slot_initialize
  export   ngnet.slot_initialize_finished  as  signal_initialization

  /// start of episode process:
  connect  lmanager.signal_start_of_episode               , tr_ngnet.slot_reset
  connect  tr_ngnet.slot_reset_finished                   , tr_state.slot_reset
  connect  tr_state.slot_reset_finished                   , timer.slot_reset
  connect  timer.slot_reset_finished                      , environment.slot_start_episode
  connect  environment.slot_start_episode_finished        , robot.slot_start_episode
  export   robot.slot_start_episode_finished  as  signal_start_of_episode

  /// start of time step process:
  connect  environment.signal_start_of_timestep           , timer.slot_start_step
  export   timer.signal_start_of_step      as  signal_start_of_system_timestep
  export   timer.signal_start_of_step_ud1  as  signal_start_of_ctrl_timestep
  connect  timer.slot_start_step_finished                 , robot.slot_start_time_step

  /// end of time step process:
  connect  environment.signal_end_of_timestep             , timer.slot_finish_step
  export   timer.signal_end_of_step      as  signal_end_of_system_timestep
  export   timer.signal_end_of_step_ud1  as  signal_end_of_ctrl_timestep
  connect  timer.slot_finish_step_finished                , robot.slot_finish_time_step

  /// learning signals:
  export   exec_command_interface.slot_x1  as  slot_execute_command_des_cq
  connect  exec_command_interface.signal_y1               , robot.slot_execute_command_des_q
  export   exec_command_interface.slot_x2  as  slot_execute_command_des_cqd
  connect  exec_command_interface.signal_y2               , robot.slot_execute_command_des_qd

  export   lmanager.slot_finish_episode  as  slot_finalize_episode

  connect  lmanager.signal_end_of_learning                , environment.slot_finish_loop

  /// I/O:
  export   robot.out_base_pose      as_is
  export   robot.out_base_vel       as_is
  export   robot.out_base_rot       as_is
  export   robot.out_joint_angle    as_is
  export   robot.out_joint_vel      as_is
  export   timer.out_cont_time  as_is
  export   robot.out_force          as_is
  export   robot.out_contact        as_is
  export   lmanager.out_episode_number  as_is
  export   tr_state.out_x  as  out_state
  export   tr_ngnet.out_y  as  out_ngnet
  export   ngnet.out_distance_to_nearest_bf  as out_ngnet_distance_to_nearest_bf
  export   ngnet.out_center_state_set        as out_ngnet_center_state_set
  export   ngnet.in_extract_proportional     as in_ngnet_extract_proportional

  connect  environment.out_world  , robot.in_world

  connect  robot.out_base_pose                      , state_converter.in_vectors
  connect  robot.out_base_vel                       , state_converter.in_vectors
  connect  robot.out_joint_angle                    , state_converter.in_vectors
  connect  robot.out_joint_vel                      , state_converter.in_vectors
  connect  state_converter.out_mixed                      , tr_state.in_x
  connect  ngnet.out_f2                                   , tr_ngnet.in_converter
  connect  timer.out_disc_time                            , tr_ngnet.in_disc_time
  connect  timer.out_disc_time                            , tr_state.in_disc_time
  connect  tr_state.out_x                                 , tr_ngnet.in_x
  connect  action_converter.out_f2                        , exec_command_interface.in_function


  /// parameter setting:

  lmanager.config ={
      MaxEpisodeNumber = 30000
      RandomSeed = "time"
    }
  environment.config ={
      ModelFiles={[]="models/env_hm.var";}
      // ModelFiles={[]="models/env_hm_fs.var";}
      // ModelFiles={[]="models/env_hm_terrain.var";}
    }
  robot.config ={
      RobotName = "Humanoid01"
    }

  ngnet.config ={
      NGnetFileName = "humanoid01/ngnet.dat"
      // NGnetFileName = "humanoid01/ngnet_q3.dat"
      // NGnetFileName = "humanoid01/ngnet_bq01.dat"
    }

  timer.config ={
      Cycle1 = 0.005
    }

  // state setup for 5-DoF constraint
  state_converter.config ={
      MixingTable = {
          resize(21)
          [0] = {PortCode="robot.out_base_pose";  Element= 2;}
          [1] = {PortCode="robot.out_base_pose";  Element= 3;}
          [2] = {PortCode="robot.out_base_pose";  Element= 4;}
          [3] = {PortCode="robot.out_base_pose";  Element= 5;}
          [4] = {PortCode="robot.out_base_pose";  Element= 6;}

          [5] = {PortCode="robot.out_joint_angle"; Element= 1;}
          [6] = {PortCode="robot.out_joint_angle"; Element= 3;}
          [7] = {PortCode="robot.out_joint_angle"; Element= 8;}
          [8] = {PortCode="robot.out_joint_angle"; Element= 9;}
          [9] = {PortCode="robot.out_joint_angle"; Element= 10;}

          [10] = {PortCode="robot.out_base_vel";  Element= 0;}
          [11] = {PortCode="robot.out_base_vel";  Element= 1;}
          [12] = {PortCode="robot.out_base_vel";  Element= 2;}
          [13] = {PortCode="robot.out_base_vel";  Element= 3;}
          [14] = {PortCode="robot.out_base_vel";  Element= 4;}
          [15] = {PortCode="robot.out_base_vel";  Element= 5;}

          [16] = {PortCode="robot.out_joint_vel"; Element= 1;}
          [17] = {PortCode="robot.out_joint_vel"; Element= 3;}
          [18] = {PortCode="robot.out_joint_vel"; Element= 8;}
          [19] = {PortCode="robot.out_joint_vel"; Element= 9;}
          [20] = {PortCode="robot.out_joint_vel"; Element= 10;}
        }
    }
  // control setup for 5-DoF constraint
  action_converter.config ={
      Factor ={
          resize(17, 5)
          //  j   0  1  2  3  4
          [0]=  ( 0, 0, 0, 0, 0)

          [1]=  ( 1, 0, 0, 0, 0)
          [2]=  ( 0, 0, 0, 0, 0)
          [3]=  ( 0, 1, 0, 0, 0)

          [4]=  ( 1, 0, 0, 0, 0)
          [5]=  ( 0, 0, 0, 0, 0)
          [6]=  ( 0, 1, 0, 0, 0)

          [7]=  ( 0, 0, 0, 0, 0)
          [8]=  ( 0, 0, 1, 0, 0)
          [9]=  ( 0, 0, 0, 1, 0)
          [10]= ( 0, 0, 0, 0, 1)
          [11]= ( 0, 0, 0, 0, 0)

          [12]= ( 0, 0, 0, 0, 0)
          [13]= ( 0, 0, 1, 0, 0)
          [14]= ( 0, 0, 0, 1, 0)
          [15]= ( 0, 0, 0, 0, 1)
          [16]= ( 0, 0, 0, 0, 0)
        }
    }


  export lmanager.config.MaxEpisodeNumber   as_is
  export lmanager.config.RandomSeed         as_is

  export environment.config.ModelFiles                as_is

  export robot.config.RobotName                       as_is
  export robot.config.BodyContactLPFParamF            as_is
  export robot.config.BodyContactLPFParamQ            as_is
  export robot.config.CommandMax                      as_is
  export robot.config.CommandMin                      as_is
  export robot.config.PDGainKd                        as_is
  export robot.config.PDGainKp                        as_is
  export robot.config.TorqueMax                       as_is

  export ngnet.config.NGnetFileName                         as_is
  export ngnet.config.StdDeviationInfinityThreshold         as     NGnetStdDeviationInfinityThreshold

  export state_converter.config.MixingTable                 as     StateConvertTable
  export action_converter.config.Factor                     as     ActionConvertFactor

  export timer.config.Cycle1                                as     CtrlCycle

}

module MSingleRobotEnvironment env


// control test:
// module MConstant_TRealVector des_cq
// des_cq.config={Constant=(2,0,0,0,0);}
// module  MReplaceSignalArguments_TReal_TRealVector  des_cq_signal
// connect env.signal_start_of_ctrl_timestep , des_cq_signal.slot_in
// connect des_cq.out_const , des_cq_signal.in_replace
// connect des_cq_signal.signal_out , env.slot_execute_command_des_cq

// print des_cq_signal
// module MPrinter printer1
// connect des_cq_signal.signal_out , printer1.slot_real_vector

// print base_pose
// module MPrinter printer2
// module MRemoveSignalArguments_TReal signal_end_of_ctrl_timestep
// connect env.signal_end_of_ctrl_timestep , signal_end_of_ctrl_timestep.slot_in
// connect env.out_base_pose , printer2.in_real_vector
// connect signal_end_of_ctrl_timestep.signal_out , printer2.slot_print_in

// print joint_angle
// module MPrinter printer3
// module MRemoveSignalArguments_TReal signal_end_of_ctrl_timestep
// connect env.signal_end_of_ctrl_timestep , signal_end_of_ctrl_timestep.slot_in
// connect env.out_joint_angle , printer3.in_real_vector
// connect signal_end_of_ctrl_timestep.signal_out , printer3.slot_print_in

// print force
// module MPrinter printer4
// module MRemoveSignalArguments_TReal signal_end_of_ctrl_timestep
// connect env.signal_end_of_ctrl_timestep , signal_end_of_ctrl_timestep.slot_in
// connect env.out_force , printer4.in_real_vector
// connect signal_end_of_ctrl_timestep.signal_out , printer4.slot_print_in
