// Roll task's agent file
// using faster time-step
def episode_start_rl(task_id)
{
  task_id.memory ={TmpR2= 0.0;}  // total-time
}
def action_start_rl(task_id)
{
}
// forward roll
def timestep_end_rlf(task_id)
{
  task_id.memory ={
      // reward from rolling movement (angular vel around y-axis)
      Reward= 25.0*0.0005*cast<real>(BaseVel[4])
      TmpR2= cast<real>(TmpR2) + cast<real>(TimeStep)  // update total-time
    }
  if(cast<real>(task_id.memory.TmpR2) > 10.0)
  {
    task_id.memory ={EndOfEps= true;}  // end of episode
  }
}
// backward roll
def timestep_end_rlb(task_id)
{
  task_id.memory ={
      // reward from rolling movement (angular vel around y-axis)
      Reward= -25.0*0.0005*cast<real>(BaseVel[4])
      TmpR2= cast<real>(TmpR2) + cast<real>(TimeStep)  // update total-time
    }
  if(cast<real>(task_id.memory.TmpR2) > 10.0)
  {
    task_id.memory ={EndOfEps= true;}  // end of episode
  }
}

def make_task_rl2(task_id,env_id)
{
  module  MDynSimUnivTask task_id

  task_id.config ={
      SensingAtEpisodeStart  = false
      SensingAtActionStart   = false
      // SensingAtTimeStepStart = false
      SensingAtTimeStepEnd   = true

      FEpisodeStart   = "episode_start_rl"
      FActionStart    = "action_start_rl"
      // FTimeStepStart  = "timestep_start_rl"
      FTimeStepEnd    = ""
      ForwardStepCost = true
    }

  // slot_finish_episode  and  slot_end_of_action are not connected
  connect env_id.signal_start_of_system_timestep , task_id.slot_start_time_step
  // connect env_id.signal_end_of_system_timestep   , task_id.slot_finish_time_step
  connect env_id.signal_end_of_ctrl_timestep     , task_id.slot_finish_time_step

  // connect env_id.out_base_pose                   , task_id.in_base_pose
  connect env_id.out_base_vel                    , task_id.in_base_vel
  connect env_id.out_base_rot                    , task_id.in_base_rot
  connect env_id.out_force                       , task_id.in_force
  connect env_id.out_contact                     , task_id.in_contact
}
def make_task_rl2_f(task_id,env_id)
{
  make_task_rl2(task_id,env_id)
  task_id.config ={
      FTimeStepEnd    = "timestep_end_rlf"
    }
}
def make_task_rl2_b(task_id,env_id)
{
  make_task_rl2(task_id,env_id)
  task_id.config ={
      FTimeStepEnd    = "timestep_end_rlb"
    }
}
