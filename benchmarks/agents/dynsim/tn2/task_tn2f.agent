// Turning task's agent file
// using faster time-step
def episode_start_tn(task_id)
{
  task_id.memory ={TmpR1= 0.0;  TmpR2= 0.0;}  // sum-of-reward, total-time
}
def action_start_tn(task_id)
{
  task_id.memory ={TmpB1= false;  TmpB2= false;}  // no falling down (body,head)
}
def timestep_end_tn(task_id)
{
  task_id.memory ={
      Reward= 25.0*cast<real>(task_id.config.CR1)*(cast<real>(BaseVel[5]))
      Reward= cast<real>(Reward) - 25.0*0.0001*norm(shuffle(cast<list<real> >(BaseVel),(0,1)))
    }
  if(!cast<bool>(task_id.memory.TmpB1) && cast<bool>(task_id.memory.Contact[0]))
  {
    task_id.memory ={
        TmpB1= true  // fall down (body)
        Reward= cast<real>(Reward) - 4.0  // falling-down penalty
      }
  }
  if(!cast<bool>(task_id.memory.TmpB2) && cast<bool>(task_id.memory.Contact[1]))
  {
    task_id.memory ={
        TmpB2= true  // fall down (head)
        Reward= cast<real>(Reward) - 0.1  // falling-down penalty
      }
  }
  task_id.memory ={
      TmpR1= cast<real>(TmpR1) + cast<real>(Reward)  // update sum-of-reward
      TmpR2= cast<real>(TmpR2) + cast<real>(TimeStep)  // update total-time
    }
  if(cast<real>(task_id.memory.TmpR1) < -40.0 || cast<real>(task_id.memory.TmpR2) > 20.0)
  {
    task_id.memory ={EndOfEps= true;}  // end of episode
  }
}

def make_task_tn2(task_id,env_id)
{
  module  MDynSimUnivTask task_id

  task_id.config ={
      SensingAtEpisodeStart  = false
      SensingAtActionStart   = false
      // SensingAtTimeStepStart = false
      SensingAtTimeStepEnd   = true

      FEpisodeStart   = "episode_start_tn"
      FActionStart    = "action_start_tn"
      // FTimeStepStart  = "timestep_start_tn"
      FTimeStepEnd    = "timestep_end_tn"
      ForwardStepCost = true
    }

  // slot_finish_episode  and  slot_end_of_action are not connected
  connect env_id.signal_start_of_system_timestep , task_id.slot_start_time_step
  // connect env_id.signal_end_of_system_timestep   , task_id.slot_finish_time_step
  connect env_id.signal_end_of_ctrl_timestep     , task_id.slot_finish_time_step

  // connect env_id.out_base_pose                   , task_id.in_base_pose
  connect env_id.out_base_vel                    , task_id.in_base_vel
  connect env_id.out_base_rot                    , task_id.in_base_rot
  connect env_id.out_force                       , task_id.in_force
  connect env_id.out_contact                     , task_id.in_contact
}

def make_task_tn2_l(task_id,env_id)
{
  make_task_tn2(task_id,env_id)
  task_id.config= {CR1= 0.0005;}
}
def make_task_tn2_r(task_id,env_id)
{
  make_task_tn2(task_id,env_id)
  task_id.config= {CR1= -0.0005;}
}
