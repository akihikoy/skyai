// Common modules and connections for Q(lambda)-learning with wire fitting
// NOTE: this file is assumed to be included inside a composite module definition
//       where module avf_wire_fitting should be defined before loading this file

module  MTDGenericFuncApprox_TContinuousAction     behavior
module  MRemoveSignalArguments_TRealVector         exec_action
module  MSimpleAccumulator_TReal                   rwd_accumulator

module  MHolder_TRealVector                        holder_action
module  MSimpleDataLogger2_TInt_TReal              logger_eps_return
module  MUniversalDataLogger                       logger_action_result

// interface modules:
module  MForwarder0                                rl_slot_initialize
module  MForwarder0                                rl_slot_start_episode
module  MMediator0_TRealVector                     rl_in_feature
module  MMediator0_TReal                           rl_in_cont_time

/// initialization process:
export   rl_slot_initialize.slot_in  as  slot_initialize
connect  rl_slot_initialize.signal_out           , avf_wire_fitting.slot_initialize
connect  rl_slot_initialize.signal_out           , behavior.slot_initialize
connect  rl_slot_initialize.signal_out           , logger_eps_return.slot_initialize
connect  rl_slot_initialize.signal_out           , logger_action_result.slot_initialize

/// start of episode process:
export   rl_slot_start_episode.slot_in  as  slot_start_episode
connect  rl_slot_start_episode.signal_out        , avf_wire_fitting.slot_reset
connect  rl_slot_start_episode.signal_out        , behavior.slot_start_episode

/// start of time step process:

/// end of time step process:

/// learning signals:
// export   behavior.signal_execute_action  as_is
connect  behavior.signal_execute_action             , exec_action.slot_in
connect  behavior.signal_execute_action             , holder_action.slot_1
connect  exec_action.signal_out                     , rwd_accumulator.slot_reset

export   rwd_accumulator.slot_add  as  slot_add_to_reward

// export   behavior.slot_finish_action  as_is
connect  behavior.signal_avf_add_to_parameter       , avf_wire_fitting.slot_add_to_parameter
connect  behavior.signal_end_of_action              , logger_action_result.slot_log
export   behavior.signal_end_of_action as_is

export   behavior.slot_finish_episode  as_is

connect  behavior.signal_end_of_episode             , logger_eps_return.slot_log
connect  logger_eps_return.slot_log_finished        , logger_action_result.slot_newline
export   logger_action_result.slot_newline_finished  as  signal_end_of_episode

/// I/O:
export   behavior.in_updatable  as_is

connect  rwd_accumulator.out_sum                    , behavior.in_reward

export   rl_in_feature.in_1  as  in_feature
connect  rl_in_feature.out_1                        , avf_wire_fitting.in_feature
connect  behavior.out_episode_number                , avf_wire_fitting.in_episode_number
connect  avf_wire_fitting.out_select_action         , behavior.in_avf_select_action
connect  avf_wire_fitting.out_replacing_trace       , behavior.in_avf_replacing_trace
connect  avf_wire_fitting.out_create_parameter      , behavior.in_avf_create_parameter
connect  avf_wire_fitting.out_zero_parameter        , behavior.in_avf_zero_parameter

export   behavior.out_return_in_episode  as_is

connect  behavior.out_episode_number                , logger_eps_return.in_data1
connect  behavior.out_return_in_episode             , logger_eps_return.in_data2

export   rl_in_cont_time.in_1  as  in_cont_time
connect  behavior.out_episode_number                , logger_action_result.in_data_int
connect  rl_in_cont_time.out_1                      , logger_action_result.in_data_real
connect  rwd_accumulator.out_last_accessed          , logger_action_result.in_data_real
connect  behavior.out_td_error                      , logger_action_result.in_data_real
connect  behavior.out_current_action_value          , logger_action_result.in_data_real


/// parameter setting:

logger_eps_return.config={
    FileName = "log-eps-ret.dat"
  }

logger_action_result.config ={
    FileName = "log-action-res.dat"
    OrderOfColumns ={
        ["behavior.out_episode_number"]= 1
        ["rl_in_cont_time.out_1"]= 2
        ["rwd_accumulator.out_last_accessed"]= 4
        ["behavior.out_td_error"]= 5
        ["behavior.out_current_action_value"]= 6
        // ["holder_action.out_1"]= 8
      }
    PutBlankData = true
  }

export behavior.config.Alpha                  as_is
export behavior.config.AlphaDecreasingFactor  as_is
export behavior.config.AlphaMin               as_is
export behavior.config.Gamma                  as_is
export behavior.config.GradientMax            as_is
export behavior.config.Lambda                 as_is
export behavior.config.LearningAlgorithm      as_is
export behavior.config.UsingEligibilityTrace  as_is
export behavior.config.UsingReplacingTrace    as_is

export avf_wire_fitting.config.ActionDim            as_is
export avf_wire_fitting.config.ActionMax            as_is
export avf_wire_fitting.config.ActionMin            as_is
export avf_wire_fitting.config.ActionNoiseKind      as_is
export avf_wire_fitting.config.ActionSelection      as_is
export avf_wire_fitting.config.Eps                  as_is
export avf_wire_fitting.config.EpsDecreasingFactor  as_is
export avf_wire_fitting.config.MinimumNoiseVar      as_is
export avf_wire_fitting.config.NoiseFactor          as_is
export avf_wire_fitting.config.PolicyImprovement    as_is
export avf_wire_fitting.config.SmoothingFactor      as_is
export avf_wire_fitting.config.Tau                  as_is
export avf_wire_fitting.config.TauDecreasingFactor  as_is
export avf_wire_fitting.config.TauMin               as_is
export avf_wire_fitting.config.Tiny                 as_is
export avf_wire_fitting.config.TraceMax             as_is
