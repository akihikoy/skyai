// common agent file for Bioloid
// NOTE: lmanager and environment must be defined in this file

composite MBioloidLearningEnvironment
{
  module  MManualLearningManager                    lmanager
  module  MBioloidEnvironment                       environment
  module  MBasisFunctionsDCOBNGnet                  ngnet
  module  MUserEmittedTimer                         timer

  module  MTimedResourceXX_TRealVector              tr_state
  module  MTimedResourceXY_TRealVector_TRealVector  tr_ngnet

  module  MConstMultiplier_TRealMatrix_TRealVector  action_converter

  /// initialization process:
  connect  lmanager.signal_initialization          , environment.slot_initialize
  connect  lmanager.signal_initialization          , ngnet.slot_initialize
  export   ngnet.slot_initialize_finished  as  signal_initialization

  /// start of episode process:
  connect  lmanager.signal_start_of_episode        , tr_ngnet.slot_reset
  connect  tr_ngnet.slot_reset_finished            , tr_state.slot_reset
  connect  tr_state.slot_reset_finished            , timer.slot_reset
  connect  timer.slot_reset_finished               , environment.slot_start_episode
  export   environment.slot_start_episode_finished  as  signal_start_of_episode

  /// start of time step process:
  connect  environment.signal_start_of_timestep    , timer.slot_start_step
  export   timer.signal_start_of_step  as  signal_start_of_timestep

  /// end of time step process:
  connect  environment.signal_end_of_timestep      , timer.slot_finish_step
  export   timer.signal_end_of_step  as  signal_end_of_timestep

  /// learning signals:
  export   action_converter.slot_x  as  slot_execute_command_des_cq
  connect  action_converter.signal_y               , environment.slot_execute_command_des_q

  export   environment.signal_system_reward  as  signal_reward

  export   environment.signal_end_of_episode  as_is

  export   lmanager.slot_finish_episode  as  slot_finalize_episode


  /// I/O:
  connect  environment.out_sensor_angles     , tr_state.in_x
  connect  ngnet.out_f2                      , tr_ngnet.in_converter
  connect  timer.out_disc_time               , tr_ngnet.in_disc_time
  connect  timer.out_disc_time               , tr_state.in_disc_time
  connect  tr_state.out_x                    , tr_ngnet.in_x

  export   lmanager.out_episode_number  as_is
  export   environment.out_sensor_angles  as_is
  export   environment.out_sensor_distance_diff_c  as_is
  export   timer.out_disc_time  as_is
  export   timer.out_cont_time  as_is
  export   tr_state.out_x       as  out_state
  export   tr_ngnet.out_y       as  out_ngnet
  export   ngnet.out_distance_to_nearest_bf  as out_ngnet_distance_to_nearest_bf
  export   ngnet.out_center_state_set        as out_ngnet_center_state_set
  export   ngnet.in_extract_proportional     as in_ngnet_extract_proportional

  /// parameter setting:

  export lmanager.config.MaxEpisodeNumber  as_is
  export lmanager.config.RandomSeed  as_is

  export environment.config.ActuatorIndexes  as_is
  export environment.config.SensingAngleIndexes  as_is
  export environment.config.DistanceSensorIndex  as_is
  export environment.config.AngleMax  as_is
  export environment.config.AngleMin  as_is

  export ngnet.config.NGnetFileName  as_is

  export timer.config.Cycle1  as  TimerCycle
  export action_converter.config.Factor  as  ActionConvertFactor

}

module MBioloidLearningEnvironment env

// aggregate reward signal and eoe signal:
module  MForwarder1_TReal  cmn_signal_reward
module  MForwarder0        cmn_signal_end_of_episode

connect  env.signal_reward  , cmn_signal_reward.slot_in

env.config ={
    MaxEpisodeNumber = 1600
    RandomSeed = "time"

    TimerCycle = 0.1
  }
