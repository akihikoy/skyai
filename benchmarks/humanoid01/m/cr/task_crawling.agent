// Crawling task's agent file
include_once "cmn_task"

composite MMoveForwardTask
{
  taskb_make_interface()

  taskb_add_step_cost()

  // reward from forward (x-axis) movement
  taskb_add_base_vel_reward(reward_vx,0,ForwardRewardGain,0.01)

  // penalty for y-movement
  taskb_add_base_vel_sqsum_reward(penalty_vy,(1),SidewardPenaltyGain,-0.1)

  // penalty for falling down (base link and head link)
  taskb_add_falling_down_penalty(penalty_fall,(0,1),FallingDownPenalty,-4.0)

  // end of episode: sum of reward is less than a const value
  taskb_endofeps_sum_reward_min(end_of_eps1,SumOfRmin,-40.0)

  // end of episode: time is greater than a const value
  taskb_endofeps_time_max(end_of_eps2,MaxTime,20.0)
}

def make_task_crawling(task_id,env_id)
{
  module MMoveForwardTask task_id

  /// initialization process:

  /// start of episode process:

  /// start of time step process:

  /// end of time step process:
  connect  env_id.signal_end_of_system_timestep  , task_id.slot_finish_time_step

  /// learning signals:
  connect  env_id.signal_reward                  , task_id.slot_step_cost

  /// I/O:
  connect env_id.out_base_vel                    , task_id.in_base_vel
  connect env_id.out_contact_with_ground         , task_id.in_contact_with_ground
}

