module  MMaxElementValue_TRealVector          max_elem_value
module  MMaxElementIndex_TRealVector          max_elem_index
module  MNonzeroElements_TRealVector          ngnet_nonzero
module  MNonzeroElementsCounter_TRealVector   ngnet_nonzero_cnt
module  MUniversalDataLogger                  logger_ngnet

module  MMediator0_TRealVector                in_ngnet
// export  in_ngnet.in_1  as  in_ngnet
module  MMediator0_TInt                       in_episode_number
// export  in_episode_number.in_1  as  in_episode_number
module  MMediator0_TReal                      in_cont_time
// export  in_cont_time.in_1  as  in_cont_time
module  MMediator0_TRealVector                in_state
// export  in_state.in_1  as  in_state

/// initialization process:
// export   logger_ngnet.slot_initialize  as_is

/// learning signals:
// export   logger_ngnet.slot_log  as_is
// export   logger_ngnet.slot_newline  as_is

/// I/O:
connect  in_ngnet.out_1                  , max_elem_value.in_x
connect  in_ngnet.out_1                  , max_elem_index.in_x
connect  in_ngnet.out_1                  , ngnet_nonzero.in_x
connect  in_ngnet.out_1                  , ngnet_nonzero_cnt.in_x

connect  in_episode_number.out_1         , logger_ngnet.in_data_int
connect  in_cont_time.out_1              , logger_ngnet.in_data_real
connect  max_elem_index.out_y            , logger_ngnet.in_data_int
connect  max_elem_value.out_y            , logger_ngnet.in_data_real
connect  ngnet_nonzero_cnt.out_y         , logger_ngnet.in_data_int
connect  ngnet_nonzero.out_y             , logger_ngnet.in_data_real_vector
connect  in_state.out_1                  , logger_ngnet.in_data_real_vector

logger_ngnet.config ={
    FileName = "log-ngnet.dat"
    OrderOfColumns ={
        ["in_episode_number.out_1"]= 1
        ["in_cont_time.out_1"]= 2
        ["max_elem_index.out_y"]= 4
        ["max_elem_value.out_y"]= 5
        ["in_state.out_1"]= 7
        ["ngnet_nonzero_cnt.out_y"]= 9
        ["ngnet_nonzero.out_y"]= 11
      }
    PutBlankData = true
  }

def test_func()
{
  return 10
}
def call_func(X)
{
  return X()
}
ngnet_nonzero.config ={
    Threshold = 0.01 * call_func(test_func)
    Threshold = cast<real>(Threshold)*10000*cast<real>(ngnet_nonzero.config.Threshold)
  }
ngnet_nonzero_cnt.config ={
    Threshold = cast<int>(logger_ngnet.config.OrderOfColumns["ngnet_nonzero.out_y"])
  }

include_once "empty-file.var"
include_once "empty-file.var"

